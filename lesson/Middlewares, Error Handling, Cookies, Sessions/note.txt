express js life cycle

client => req => app.js(middleware,routes,res) => client (成循環可以作圖)


Middleware 特徵
1. 是夾再req&res中間會被執行的FUNCTION => 因此放在require & route中間
2. 不管req類型，MIDDLEWARE再收到REQ時都會被執行
3. 該function有三個INPUT，req,res,next(代表下一個middleware，這個沒寫下一個就不會被執行)
寫範例DEMO CODE

middleware也可以這樣設計 => req.method="POST"
若在 middleware做res.send，app.get就不能做res.send了 (只能一次!)

app.use("/routename",(res,req,next)) => 設定在某個route才使用該middleware
也可以直接寫在 app.get("route","middleware1","middleware2"......,(res,req)=>{})的route裡面
const middleware = (req,res,next)=>{......} => 在app.get裡面寫middleware變數 => 較common


error handlng
用middleware來設置error handler (但是要設計在最下面，方便讓所有的error都pass到下面!!!)

app.use((err,req,res,next)=>{console.log(err};res.status(500).send("text message))


第二種 error handler
mongoose findOne => 剛剛說ㄉ第一種沒抓到，因為async的function要特別設定
要用 function 多 next變數，try catch (裡面要有 next()) => 這樣才能傳到最下面的middleware error handler

第三種
app.get("/*") => 放在所有route的最下方，所有不被預期的路由都會跑來這裡 (404 not found)

第四種 mongoose validator
save validator error has to caught by .catch()

findOneAndUpdate validator error 要寫在第四個參數 (err,doc)=>{if (err) {res.send(err);} else{res.send(doc)



Cookies
key-value pair 來存
儲存在 user's browser 裡面，跟 local&session storage很像，不同的是cookies mainly for reading server-side only，local/session can only be read on the client side
sending request時，cookies會被包含在裡面一起被送出去 (local&session並不會)

Cookies in server
res.cookie("key","value"); // 寫某一個 key value pair進去使用者的cookie中
可以去 F12 儲存空間=> Cookie 查看


cookie-parser + req.cookies.name => 跑出所有的cookies 物件

signing a cookie
cookie problem => 可以被 user 端輕易修改
要如何確保自己ㄉcookie沒被修改過 => sign the cookie!
簽名 => 把前後加上自己的獨特字符 => 讀取回來的時候再把前後拿掉就好 (如果前後有動過就知道被改過了)
並不是加密，單純做簽名而已
在cookieParser("sign string") => middleware加的 string 就是簽章，但真正存的並不是那個string
res.cookie("key","value",{signed:true});

拿回來解除簽章
req.signedCookies => 若被改過就會是 undefined

Session

常拿來跟 cookies 並用

解決cookies儲存資料量小(4KB)的問題
cookies 不能被拿來存重要的資料 => 別人隨便都可以看到 & 修改

session是server的一個部分，是一個資料庫
cookies 只儲存一個id，剩下的資訊在session中用key value pair存起來，key就是那ID
可以同時解決上述兩個問題

Session in Server
express-session下載
使用 session middleware
res.session.<name> = <自己加>;
注意:若沒有放到db裡面，server關掉就會消失

saveUninitialized: false => 直到使用session功能才會出現 connext_sid在cookies

environment variable
process object
a global object in node.js
process.env
下載dotenv
寫在最上面 require("dotenv").config()
SECRET=This is my top secret.
process.env.SECRET
node .gitignore => 送到github上面就看不到

flash
a place inside sessions,store some flash message to users(success or failure message)
module name: connect-flash
用flash前要先用session才能用
要記得用middleware flash()
req.flash("success_msg","text......")
req.flash("succes_msg") => return "text......"